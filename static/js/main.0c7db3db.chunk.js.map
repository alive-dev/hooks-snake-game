{"version":3,"sources":["utils/index.js","constants/index.js","components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","App.js","reportWebVitals.js","index.js"],"names":["getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","fields","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","column","index","Button","status","onStop","onStart","onRestart","ManipulationPanel","onChange","timer","undefined","unsubscribe","clearInterval","App","useState","setFields","body","setBody","tick","setTick","setStatus","direction","setDirection","setDifficulty","onChangeDirection","useCallback","newDirection","useEffect","setInterval","delta","newPosition","position","isCollision","isEatingMyself","newBody","removingTrack","pop","unshift","handleMoving","handlKeyDown","e","keyCode","document","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0c7db3db.chunk.js","sourcesContent":["export const getFoodPosition = (fieldSize, excludes) => {\r\n    while (true) {\r\n        const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\r\n        const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\r\n        const conflict = excludes.some((item) => item.x === x && item.y === y);\r\n        if (!conflict) {\r\n            return { x, y };\r\n        }\r\n    }\r\n};\r\nexport const isEatingMyself = (fields, position) => {\r\n    return (fields[position.y][position.x] = \"snake\");\r\n};\r\n\r\nexport const initFields = (fieldSize, snake) => {\r\n    const fields = [];\r\n    for (let i = 0; i < fieldSize; i++) {\r\n        const cols = new Array(fieldSize).fill(\"\");\r\n        fields.push(cols);\r\n    }\r\n    fields[snake.y][snake.x] = \"snake\";\r\n    const food = getFoodPosition(fieldSize, [snake]);\r\n    fields[food.y][food.x] = \"food\";\r\n\r\n    return fields;\r\n};\r\n","import { initFields } from \"../utils\";\r\n\r\nconst fieldSize = 35;\r\nexport const initialPosition = { x: 17, y: 17 };\r\nexport const initialValues = initFields(fieldSize, initialPosition);\r\nexport const defaultInterval = 100;\r\nexport const defaultDifficulty = 3;\r\n\r\nexport const Difficulty = [1000, 500, 100, 50, 10];\r\n\r\nexport const GameStatus = Object.freeze({\r\n    init: \"init\",\r\n    playing: \"playing\",\r\n    suspended: \"suspended\",\r\n    gameover: \"gameover\",\r\n});\r\n\r\nexport const Direction = Object.freeze({\r\n    up: \"up\",\r\n    right: \"right\",\r\n    left: \"left\",\r\n    down: \"down\",\r\n});\r\n\r\nexport const DirectionKeyCodeMap = Object.freeze({\r\n    37: Direction.left,\r\n    38: Direction.up,\r\n    39: Direction.right,\r\n    40: Direction.down,\r\n});\r\n\r\nexport const OppositeDirection = Object.freeze({\r\n    up: \"down\",\r\n    right: \"left\",\r\n    left: \"right\",\r\n    down: \"up\",\r\n});\r\n\r\nexport const Delta = Object.freeze({\r\n    up: { x: 0, y: -1 },\r\n    right: { x: 1, y: 0 },\r\n    left: { x: -1, y: 0 },\r\n    down: { x: 0, y: 1 },\r\n});\r\n","import React from \"react\";\r\nimport { defaultDifficulty, Difficulty } from \"../constants\";\r\n\r\nconst Navigation = ({\r\n    length,\r\n    difficulty = defaultDifficulty,\r\n    onChangeDifficulty,\r\n}) => {\r\n    const upVisibility = difficulty < Difficulty.length ? \"\" : \"is-hidden\";\r\n    const downVisibility = difficulty > 1 ? \"\" : \"is-hidden\";\r\n    const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\r\n    const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\r\n\r\n    return (\r\n        <div className=\"navigation\">\r\n            <div className=\"navigation-item\">\r\n                <span className=\"navigation-label\">Length:</span>\r\n                <div className=\"navigation-item-number-container\">\r\n                    <div className=\"num-board\">{length}</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"navigation-item\">\r\n                <span className=\"navigation-label\">Difficulty:</span>\r\n                <div className=\"navigation-item-number-container\">\r\n                    <span className=\"num-board\">{difficulty}</span>\r\n\r\n                    <div className=\"difficulty-button-container\">\r\n                        <div\r\n                            className={`difficulty-button difficulty-up ${upVisibility}`}\r\n                            onClick={onUpDifficulty}\r\n                        ></div>\r\n                        <div\r\n                            className={`difficulty-button difficulty-down ${downVisibility}`}\r\n                            onClick={onDownDifficulty}\r\n                        ></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\n\r\nconst Field = ({ fields }) => {\r\n    return (\r\n        <div className=\"field\">\r\n            {fields.map((row) => {\r\n                return row.map((column, index) => {\r\n                    return <div key={index} className={`dots ${column}`}></div>;\r\n                });\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\nimport { GameStatus } from \"../constants\";\r\n\r\nconst Button = ({ status, onStop, onStart, onRestart }) => {\r\n    return (\r\n        <div className=\"button\">\r\n            {status === GameStatus.gameover && (\r\n                <button className=\"btn btn-gameover\" onClick={onRestart}>\r\n                    gameover\r\n                </button>\r\n            )}\r\n            {status === GameStatus.init && (\r\n                <button className=\"btn btn-init\" onClick={onStart}>\r\n                    start\r\n                </button>\r\n            )}\r\n            {status === GameStatus.suspended && (\r\n                <button className=\"btn btn-suspended\" onClick={onStart}>\r\n                    start\r\n                </button>\r\n            )}\r\n            {status === GameStatus.playing && (\r\n                <button className=\"btn btn-playing\" onClick={onStop}>\r\n                    stop\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { Direction } from \"../constants\";\r\n\r\nconst ManipulationPanel = ({ onChange }) => {\r\n    const onUp = () => onChange(Direction.up);\r\n    const onRight = () => onChange(Direction.right);\r\n    const onLeft = () => onChange(Direction.left);\r\n    const onDown = () => onChange(Direction.down);\r\n\r\n    return (\r\n        <div className=\"manipulation-panel\">\r\n            <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\r\n                ←\r\n            </button>\r\n            <div>\r\n                <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\r\n                    ↑\r\n                </button>\r\n                <button\r\n                    className=\"manipulation-btn btn btn-down\"\r\n                    onClick={onDown}\r\n                >\r\n                    ↓\r\n                </button>\r\n            </div>\r\n            <button\r\n                className=\"manipulation-btn btn btn-right\"\r\n                onClick={onRight}\r\n            >\r\n                →\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ManipulationPanel;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport Field from \"./components/Field\";\nimport Button from \"./components/Button\";\nimport ManipulationPanel from \"./components/ManipulationPanel\";\nimport { initFields, getFoodPosition } from \"./utils/index\";\nimport {\n    defaultInterval,\n    defaultDifficulty,\n    Delta,\n    Difficulty,\n    Direction,\n    DirectionKeyCodeMap,\n    GameStatus,\n    OppositeDirection,\n    initialPosition,\n    initialValues,\n} from \"./constants\";\n\nlet timer = undefined;\nconst unsubscribe = () => {\n    if (!timer) {\n        return;\n    }\n    clearInterval(timer);\n};\n\nconst isCollision = (fieldSize, position) => {\n    // 上左端を超えた場合\n    if (position.y < 0 || position.x < 0) {\n        return true;\n    }\n    // 下右端を超えた場合\n    if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n        return true;\n    }\n    return false;\n};\nconst isEatingMyself = (fields, position) => {\n    return fields[position.y][position.x] === \"snake\";\n};\nfunction App() {\n    const [fields, setFields] = useState(initialValues);\n    const [body, setBody] = useState([]);\n    const [tick, setTick] = useState(0);\n    const [status, setStatus] = useState(GameStatus.init);\n    const [direction, setDirection] = useState(Direction.up);\n    const [difficulty, setDifficulty] = useState(defaultDifficulty);\n\n    const onStart = () => setStatus(GameStatus.playing);\n    const onStop = () => setStatus(GameStatus.suspended);\n\n    const onChangeDirection = useCallback(\n        (newDirection) => {\n            if (status !== GameStatus.playing) {\n                return direction;\n            }\n            if (OppositeDirection[direction] === newDirection) {\n                return;\n            }\n            setDirection(newDirection);\n        },\n        [direction, status]\n    );\n\n    const onRestart = () => {\n        timer = setInterval(() => {\n            setTick((tick) => tick + 1);\n        }, defaultInterval);\n        setDirection(Direction.up);\n        setStatus(GameStatus.init);\n        setBody([initialPosition]);\n        setFields(initFields(fields.length, initialPosition));\n    };\n\n    const handleMoving = () => {\n        const { x, y } = body[0];\n        const delta = Delta[direction];\n        const newPosition = {\n            x: x + delta.x,\n            y: y + delta.y,\n        };\n        if (\n            isCollision(fields.length, newPosition) ||\n            isEatingMyself(fields, newPosition)\n        ) {\n            return false;\n        }\n        const newBody = [...body];\n        if (fields[newPosition.y][newPosition.x] !== \"food\") {\n            const removingTrack = newBody.pop();\n            fields[removingTrack.y][removingTrack.x] = \"\";\n        } else {\n            const food = getFoodPosition(fields.length, [\n                ...newBody,\n                newPosition,\n            ]);\n            fields[food.y][food.x] = \"food\";\n        }\n        fields[newPosition.y][newPosition.x] = \"snake\";\n        newBody.unshift(newPosition);\n        setFields(fields);\n        setBody(newBody);\n        return true;\n    };\n\n    const onChangeDifficulty = useCallback(\n        (difficulty) => {\n            if (status !== GameStatus.init) {\n                return;\n            }\n            if (difficulty < 1 || difficulty > Difficulty.length) {\n                return;\n            }\n            setDifficulty(difficulty);\n        },\n        [status, difficulty]\n    );\n\n    useEffect(() => {\n        setBody([initialPosition]);\n        const interval = Difficulty[difficulty - 1];\n        timer = setInterval(() => {\n            setTick((tick) => tick + 1);\n        }, interval);\n        return unsubscribe;\n    }, [difficulty]);\n\n    useEffect(() => {\n        if (body.length === 0 || status !== GameStatus.playing) {\n            return;\n        }\n        const canContinue = handleMoving();\n        if (!canContinue) {\n            unsubscribe();\n            setStatus(GameStatus.gameover);\n        }\n    }, [tick]);\n\n    useEffect(() => {\n        const handlKeyDown = (e) => {\n            const newDirection = DirectionKeyCodeMap[e.keyCode];\n            if (!newDirection) {\n                return;\n            }\n            onChangeDirection(newDirection);\n        };\n        document.addEventListener(\"keydown\", handlKeyDown);\n        return () => document.removeEventListener(\"keydown\", handlKeyDown);\n    }, [onChangeDirection]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"header\">\n                <div className=\"title-container\">\n                    <h1 className=\"title\">Snake Game</h1>\n                </div>\n                <Navigation\n                    length={body.length}\n                    difficulty={difficulty}\n                    onChangeDifficulty={onChangeDifficulty}\n                />\n            </header>\n            <main className=\"main\">\n                <Field fields={fields} />\n            </main>\n            <footer className=\"footer\">\n                <Button\n                    status={status}\n                    onStop={onStop}\n                    onStart={onStart}\n                    onRestart={onRestart}\n                />\n                <ManipulationPanel onChange={onChangeDirection} />\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}